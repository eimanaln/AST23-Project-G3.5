import subprocess

from host_manager.host import Host
from .deployment_data import DeploymentData
from .test_oracle import TestOracle
from .test_result import TestResult


class VulnerabilityOracle(TestOracle):
    def verify_deployment(self, host: Host, deployment_data: DeploymentData) -> TestResult:

        nmap_command = f"nmap -sV {host.container_ip}"
        try:
            result = subprocess.run(nmap_command, shell=True, check=True, text=True, capture_output=True)

            lines = result.stdout.split('\n')
            open_ports = []
            for line in lines:
                if "open" in line and not line.startswith('Nmap'):
                    open_ports.append(line.strip())

            if open_ports:
                return TestResult(False, self._render_message(open_ports), open_ports)

            else:
                # Test is passed if no ports are open
                return TestResult(True, "No open ports found")

        except subprocess.CalledProcessError as e:
            return TestResult(False, f"Failed to execute nmap: {e}")

    def _render_message(self, open_ports: list[str]) -> str:
        message = "Open ports found:\n"
        for port in open_ports:
            message += "\t- " + port + "\n"
        return message